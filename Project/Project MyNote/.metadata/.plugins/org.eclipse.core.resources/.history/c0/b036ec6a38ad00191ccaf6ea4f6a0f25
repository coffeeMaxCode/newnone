package seontalk.model;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;

import seontalk.control.DBConnectionMgr;
import seontalk.view.Mentor;
import seontalk.vo.MemberVO;

public class MemberDao {
	public final static String ALL 			= "all";
	public final static String SIGNUP		= "signup";
	public final static String CHECK_ID 	= "check_id";
	public final static String CHECK_NICK   = "check_nick";
	public final static String SEARCH   	= "search";
	public final static String MENTOR   	= "mentor";
	public final static String FOLLOWER   	= "follower";
	public final static String FOLLOWING   	= "following";
	Connection con;
	CallableStatement cstmt;
	PreparedStatement pstmt;
	ResultSet rs;
	public int Insert(String work,MemberVO rVO) {
		int result = 0;
		con = DBConnectionMgr.getConnection();
		try {
			if(SIGNUP.contentEquals(work)) {
				cstmt = con.prepareCall("{call proc_signup(?,?,?,?,?,?,?,?,?)}");
				cstmt.setString(1, rVO.getId());
				cstmt.setString(2, rVO.getName());
				cstmt.setString(3, rVO.getPw());
				cstmt.setString(4, rVO.getHp());
				cstmt.setString(5, rVO.getNick());
				cstmt.setString(6, rVO.getBirth());
				cstmt.setString(7, rVO.getMentoring());
				cstmt.setString(8, rVO.getInterest1());
				cstmt.setString(9, rVO.getInterest2());
			}
			else if(FOLLOWING.equals(work)) {
				cstmt = con.prepareCall("{call proc_followIns(?,?)}");
				cstmt.setString(1, rVO.getId());
				cstmt.setString(2, rVO.getFollow_nick());
			}
			result = cstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
				cstmt.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return result;
	}

	public int Update(MemberVO rVO) {
		int result = 0;
		con = DBConnectionMgr.getConnection();
		try {
			cstmt = con.prepareCall("{call proc_memUpd(?,?,?,?,?,?,?)}");
			cstmt.setString(1, rVO.getId());
			cstmt.setString(2, rVO.getName());
			cstmt.setString(3, rVO.getHp());
			cstmt.setString(4, rVO.getNick());
			cstmt.setString(5, rVO.getBirth());
			cstmt.setString(6, rVO.getInterest1());
			cstmt.setString(7, rVO.getInterest2());
			result = cstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
				cstmt.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return result;
	}

	public int Delete(MemberVO rVO) {
		int result = 0;
		con = DBConnectionMgr.getConnection();
		try {
			cstmt = con.prepareCall("{call proc_memDel(?)}");
			cstmt.setString(1, rVO.getId());
			result = cstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
				cstmt.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return result;
	}

	public List<Object> Select(String work,MemberVO rVO) {
		List<Object> VOList = new Vector<>();
		con = DBConnectionMgr.getConnection();
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT id,name,pw,hp,nick,birth  		");
			sql.append(",mentoring,interest1,interest2,rank_pt  ");
			sql.append(",profile_msg,profile_img,activation  	");
			sql.append(",font,font_size,theme,alarm   			");
			sql.append("FROM member NATURAL JOIN setting  		");
			if(ALL.equals(work)) {
				pstmt = con.prepareStatement(sql.toString());
			}
			else if(CHECK_ID.equals(work)) {
				sql.append("WHERE id = ?  ");
				pstmt = con.prepareStatement(sql.toString());
				pstmt.setString(1, rVO.getId());
			}
			else if(CHECK_NICK.equals(work)) {
				sql.append("WHERE nick = ?  ");
				pstmt = con.prepareStatement(sql.toString());
				pstmt.setString(1, rVO.getNick());
			}
			else if(SEARCH.equals(work)) {
				sql.append("WHERE "+rVO.getColumn()+" ='%?%'  ");
				pstmt = con.prepareStatement(sql.toString());
				pstmt.setString(1, rVO.getKeyword());
			}
			else if(MENTOR.equals(work)) {
				sql.append("ORDER BY rank_pt desc  ");
				pstmt = con.prepareStatement(sql.toString());
			}
			else if(FOLLOWER.equals(work)) {
				sql.append("WHERE nick in (SELECT follower_nick FROM follower WHERE id = ? )");
				pstmt = con.prepareStatement(sql.toString());
				pstmt.setString(1, rVO.getId());
			}
			else if(FOLLOWING.equals(work)) {
				sql.append("WHERE nick in (SELECT follow_nick FROM follow WHERE id = ? )");
				pstmt = con.prepareStatement(sql.toString());
				pstmt.setString(1, rVO.getId());
			}
			rs = pstmt.executeQuery();
			while(rs.next()) {
				MemberVO pVO = new MemberVO();
				pVO.setId(rs.getString("id"));
				pVO.setName(rs.getString("name"));
				pVO.setPw(rs.getString("pw"));
				pVO.setHp(rs.getString("hp"));
				pVO.setNick(rs.getString("nick"));
				pVO.setBirth(rs.getString("birth"));
				pVO.setMentoring(rs.getString("mentoring"));
				pVO.setInterest1(rs.getString("interest1"));
				pVO.setInterest2(rs.getString("interest2"));
				pVO.setRank_pt(rs.getInt("rank_pt"));
				pVO.setProfile_msg(rs.getString("profile_msg"));
				pVO.setProfile_img(rs.getString("profile_img"));
				pVO.setActivation(rs.getInt("activation"));
				pVO.setFont(rs.getString("font"));
				pVO.setFont_size(rs.getInt("font_size"));
				pVO.setTheme(rs.getString("theme"));
				pVO.setAlarm(rs.getString("alarm"));
				VOList.add(pVO);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
				pstmt.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return VOList;
	}

}
